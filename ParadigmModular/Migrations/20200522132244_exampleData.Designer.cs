// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParadigmModular.Data;

namespace ParadigmModular.Migrations
{
    [DbContext(typeof(ParadigmModularContext))]
    [Migration("20200522132244_exampleData")]
    partial class exampleData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ParadigmModular.Models.Backgrounds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Backgrounds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BackgroundName = "HallwayBG",
                            fileName = "nx.png"
                        },
                        new
                        {
                            Id = 2,
                            BackgroundName = "HallwayBG",
                            fileName = "ny.png"
                        },
                        new
                        {
                            Id = 3,
                            BackgroundName = "HallwayBG",
                            fileName = "nz.png"
                        },
                        new
                        {
                            Id = 4,
                            BackgroundName = "HallwayBG",
                            fileName = "px.png"
                        },
                        new
                        {
                            Id = 5,
                            BackgroundName = "HallwayBG",
                            fileName = "py.png"
                        },
                        new
                        {
                            Id = 6,
                            BackgroundName = "HallwayBG",
                            fileName = "pz.png"
                        },
                        new
                        {
                            Id = 7,
                            BackgroundName = "ShanghaiBG",
                            fileName = "nx.png"
                        },
                        new
                        {
                            Id = 8,
                            BackgroundName = "ShanghaiBG",
                            fileName = "ny.png"
                        },
                        new
                        {
                            Id = 9,
                            BackgroundName = "ShanghaiBG",
                            fileName = "nz.png"
                        },
                        new
                        {
                            Id = 10,
                            BackgroundName = "ShanghaiBG",
                            fileName = "px.png"
                        },
                        new
                        {
                            Id = 11,
                            BackgroundName = "ShanghaiBG",
                            fileName = "py.png"
                        },
                        new
                        {
                            Id = 12,
                            BackgroundName = "ShanghaiBG",
                            fileName = "pz.png"
                        });
                });

            modelBuilder.Entity("ParadigmModular.Models.Discounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("ParadigmModular.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InvoiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("ParadigmModular.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("Quanity")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("WatchID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("WatchID");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("ParadigmModular.Models.StandardShader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EnvMapIntensity")
                        .HasColumnType("int");

                    b.Property<double>("Metalness")
                        .HasColumnType("float");

                    b.Property<double>("NormalMapIntensity")
                        .HasColumnType("float");

                    b.Property<string>("NormalMapPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Roughness")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("StandardShader");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EnvMapIntensity = 0,
                            Metalness = 0.0,
                            NormalMapIntensity = 0.10000000000000001,
                            NormalMapPath = "models/strap.png",
                            Roughness = 0.29999999999999999
                        },
                        new
                        {
                            Id = 2,
                            EnvMapIntensity = 0,
                            Metalness = 1.0,
                            NormalMapIntensity = 0.10000000000000001,
                            NormalMapPath = "models/chrome.png",
                            Roughness = 0.14999999999999999
                        },
                        new
                        {
                            Id = 3,
                            EnvMapIntensity = 0,
                            Metalness = 0.0,
                            NormalMapIntensity = 0.0,
                            NormalMapPath = "",
                            Roughness = 0.5
                        },
                        new
                        {
                            Id = 4,
                            EnvMapIntensity = 0,
                            Metalness = 1.0,
                            NormalMapIntensity = 0.0,
                            NormalMapPath = "",
                            Roughness = 0.0
                        },
                        new
                        {
                            Id = 5,
                            EnvMapIntensity = 0,
                            Metalness = 0.0,
                            NormalMapIntensity = 0.0,
                            NormalMapPath = "",
                            Roughness = 0.0
                        });
                });

            modelBuilder.Entity("ParadigmModular.Models.TextMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TextMap");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImagePath = "Image/something"
                        });
                });

            modelBuilder.Entity("ParadigmModular.Models.Texture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextureDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("TextureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<double>("TexturePrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Texture");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImagePath = "models/strap.png",
                            TextureDesc = "This Leather makes you look rich&stuff",
                            TextureName = "Leather",
                            TexturePrice = 12.220000000000001
                        },
                        new
                        {
                            Id = 2,
                            ImagePath = "models/chrome.png",
                            TextureDesc = "Feel the Gekko",
                            TextureName = "Chrome",
                            TexturePrice = 15.220000000000001
                        },
                        new
                        {
                            Id = 3,
                            ImagePath = "models/watchFrontTexture.png",
                            TextureDesc = "Wanna be the most badass person? try this then!",
                            TextureName = "Apollo Dial",
                            TexturePrice = 33.399999999999999
                        },
                        new
                        {
                            Id = 4,
                            ImagePath = "",
                            TextureDesc = "You are just cruel at this point :D",
                            TextureName = "Solid Handle",
                            TexturePrice = 120.22
                        },
                        new
                        {
                            Id = 5,
                            ImagePath = "Image/something",
                            TextureDesc = "Smooth life",
                            TextureName = "Metalic",
                            TexturePrice = 50.219999999999999
                        },
                        new
                        {
                            Id = 6,
                            ImagePath = "Image/something",
                            TextureDesc = "If you are into that Pimpin' lifestyle",
                            TextureName = "Gold",
                            TexturePrice = 250.22
                        },
                        new
                        {
                            Id = 7,
                            ImagePath = "",
                            TextureDesc = "",
                            TextureName = "",
                            TexturePrice = 0.0
                        });
                });

            modelBuilder.Entity("ParadigmModular.Models.Watch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("WatchImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Watch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "This is a basic model you can configure it to your liking",
                            Name = "Apollo",
                            Price = 100.5,
                            WatchImagePath = "Apollo.png"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Exciting Views, Fresh look, and has a deeper meaning by visualizing the flow of time.",
                            Name = "Juno",
                            Price = 100.5,
                            WatchImagePath = "Juno.png"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A bald statemnt. That is how I would describe this watch.",
                            Name = "Mercury",
                            Price = 100.5,
                            WatchImagePath = "Mercury.png"
                        });
                });

            modelBuilder.Entity("ParadigmModular.Models.WatchComponents", b =>
                {
                    b.Property<int>("WatchId")
                        .HasColumnType("int");

                    b.Property<int>("WatchPartId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("watchComponentPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WatchId", "WatchPartId");

                    b.HasIndex("WatchPartId");

                    b.ToTable("RelationTableWatch");

                    b.HasData(
                        new
                        {
                            WatchId = 1,
                            WatchPartId = 1,
                            Id = 0
                        },
                        new
                        {
                            WatchId = 1,
                            WatchPartId = 2,
                            Id = 0
                        },
                        new
                        {
                            WatchId = 1,
                            WatchPartId = 3,
                            Id = 0
                        },
                        new
                        {
                            WatchId = 1,
                            WatchPartId = 4,
                            Id = 0
                        },
                        new
                        {
                            WatchId = 1,
                            WatchPartId = 5,
                            Id = 0
                        },
                        new
                        {
                            WatchId = 1,
                            WatchPartId = 6,
                            Id = 0
                        },
                        new
                        {
                            WatchId = 1,
                            WatchPartId = 7,
                            Id = 0
                        },
                        new
                        {
                            WatchId = 1,
                            WatchPartId = 8,
                            Id = 0
                        },
                        new
                        {
                            WatchId = 2,
                            WatchPartId = 1,
                            Id = 0
                        },
                        new
                        {
                            WatchId = 2,
                            WatchPartId = 2,
                            Id = 0
                        },
                        new
                        {
                            WatchId = 2,
                            WatchPartId = 3,
                            Id = 0
                        },
                        new
                        {
                            WatchId = 2,
                            WatchPartId = 4,
                            Id = 0
                        },
                        new
                        {
                            WatchId = 2,
                            WatchPartId = 5,
                            Id = 0
                        },
                        new
                        {
                            WatchId = 2,
                            WatchPartId = 6,
                            Id = 0
                        },
                        new
                        {
                            WatchId = 2,
                            WatchPartId = 7,
                            Id = 0
                        },
                        new
                        {
                            WatchId = 2,
                            WatchPartId = 8,
                            Id = 0
                        },
                        new
                        {
                            WatchId = 3,
                            WatchPartId = 1,
                            Id = 0
                        },
                        new
                        {
                            WatchId = 3,
                            WatchPartId = 2,
                            Id = 0
                        },
                        new
                        {
                            WatchId = 3,
                            WatchPartId = 3,
                            Id = 0
                        },
                        new
                        {
                            WatchId = 3,
                            WatchPartId = 4,
                            Id = 0
                        },
                        new
                        {
                            WatchId = 3,
                            WatchPartId = 5,
                            Id = 0
                        },
                        new
                        {
                            WatchId = 3,
                            WatchPartId = 6,
                            Id = 0
                        },
                        new
                        {
                            WatchId = 3,
                            WatchPartId = 7,
                            Id = 0
                        },
                        new
                        {
                            WatchId = 3,
                            WatchPartId = 8,
                            Id = 0
                        });
                });

            modelBuilder.Entity("ParadigmModular.Models.WatchPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ModelPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("PartTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ShaderId")
                        .HasColumnType("int");

                    b.Property<int>("TextMapId")
                        .HasColumnType("int");

                    b.Property<int>("TextureMapId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("WatchComponentsId")
                        .HasColumnType("int");

                    b.Property<int?>("WatchId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartTypeId");

                    b.HasIndex("ShaderId");

                    b.HasIndex("TextMapId");

                    b.HasIndex("TextureMapId");

                    b.HasIndex("WatchId");

                    b.ToTable("WatchPart");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ModelPath = "models/Parts/Backgrounds/Apollo.gltf",
                            Name = "Apollo",
                            ShaderId = 3,
                            TextMapId = 1,
                            TextureMapId = 3,
                            TypeId = 1,
                            WatchComponentsId = 0
                        },
                        new
                        {
                            Id = 2,
                            ModelPath = "models/Parts/BackSides/DefaultBack.gltf",
                            Name = "Chrome Back part",
                            ShaderId = 2,
                            TextMapId = 1,
                            TextureMapId = 2,
                            TypeId = 2,
                            WatchComponentsId = 0
                        },
                        new
                        {
                            Id = 3,
                            ModelPath = "models/Parts/Bases/DefaultBase.gltf",
                            Name = "Chrome Base",
                            ShaderId = 2,
                            TextMapId = 1,
                            TextureMapId = 2,
                            TypeId = 3,
                            WatchComponentsId = 0
                        },
                        new
                        {
                            Id = 4,
                            ModelPath = "models/Parts/Decorations/DefaultDecoration.gltf",
                            Name = "Chrome Decorations",
                            ShaderId = 2,
                            TextMapId = 1,
                            TextureMapId = 2,
                            TypeId = 4,
                            WatchComponentsId = 0
                        },
                        new
                        {
                            Id = 5,
                            ModelPath = "models/Parts/Pointers/DefaultPointer.gltf",
                            Name = "Silver Pointer",
                            ShaderId = 4,
                            TextMapId = 1,
                            TextureMapId = 4,
                            TypeId = 5,
                            WatchComponentsId = 0
                        },
                        new
                        {
                            Id = 6,
                            ModelPath = "models/Parts/Sleeves/DefaultSleeve.gltf",
                            Name = "Sleeves",
                            ShaderId = 1,
                            TextMapId = 1,
                            TextureMapId = 1,
                            TypeId = 6,
                            WatchComponentsId = 0
                        },
                        new
                        {
                            Id = 7,
                            ModelPath = "models/Parts/Glasses/DefaultGlass.gltf",
                            Name = "Glass",
                            ShaderId = 5,
                            TextMapId = 1,
                            TextureMapId = 7,
                            TypeId = 7,
                            WatchComponentsId = 0
                        },
                        new
                        {
                            Id = 8,
                            ModelPath = "models/Parts/Rings/DefaultRing.gltf",
                            Name = "Chrome Ring",
                            ShaderId = 2,
                            TextMapId = 1,
                            TextureMapId = 2,
                            TypeId = 8,
                            WatchComponentsId = 0
                        },
                        new
                        {
                            Id = 9,
                            ModelPath = "models/Parts/Rings/DefaultRing.gltf",
                            Name = "Example Ring",
                            ShaderId = 2,
                            TextMapId = 1,
                            TextureMapId = 2,
                            TypeId = 8,
                            WatchComponentsId = 0
                        });
                });

            modelBuilder.Entity("ParadigmModular.Models.WatchPartType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WatchPartType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pattern"
                        },
                        new
                        {
                            Id = 2,
                            Name = "BackSide"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Base"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Decoration"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Pointer"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Sleeve"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Glass"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Ring"
                        });
                });

            modelBuilder.Entity("ParadigmModular.Models.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParadigmModular.Models.Discounts", b =>
                {
                    b.HasOne("ParadigmModular.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ParadigmModular.Models.Invoice", b =>
                {
                    b.HasOne("ParadigmModular.Models.AppUser", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ParadigmModular.Models.OrderItem", b =>
                {
                    b.HasOne("ParadigmModular.Models.Invoice", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("ParadigmModular.Models.Watch", "Watch")
                        .WithMany()
                        .HasForeignKey("WatchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParadigmModular.Models.WatchComponents", b =>
                {
                    b.HasOne("ParadigmModular.Models.Watch", "Watch")
                        .WithMany("WatchComponents")
                        .HasForeignKey("WatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParadigmModular.Models.WatchPart", "WatchPart")
                        .WithMany("WatchComponents")
                        .HasForeignKey("WatchPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParadigmModular.Models.WatchPart", b =>
                {
                    b.HasOne("ParadigmModular.Models.WatchPartType", "PartType")
                        .WithMany()
                        .HasForeignKey("PartTypeId");

                    b.HasOne("ParadigmModular.Models.StandardShader", "Shader")
                        .WithMany()
                        .HasForeignKey("ShaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParadigmModular.Models.TextMap", "TextMap")
                        .WithMany()
                        .HasForeignKey("TextMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParadigmModular.Models.Texture", "TextureMap")
                        .WithMany()
                        .HasForeignKey("TextureMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParadigmModular.Models.Watch", null)
                        .WithMany("WatchParts")
                        .HasForeignKey("WatchId");
                });
#pragma warning restore 612, 618
        }
    }
}
