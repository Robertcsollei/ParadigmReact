@using ParadigmModular.Models.ViewModels;
@using ParadigmModular.Infrastructure
@model WatchViewModel

@{
    ViewData["Title"] = Model.Watch.Name;
}

<section id="ProductShow">
    <div class="ShowContainer">
        <div class="showTop">
            <p id="location">@Url.RouteUrl(ViewContext.RouteData.Values)</p>
            <p id="WatchName" class="hidden">@Model.Watch.Name</p>
        </div>
        <div class="showDown">
            <h1 class="title">@Model.Watch.Name</h1>
            <p class="price">@Model.Watch.Price $</p>
            <div class="detailsContainer">
                <p class="description">@Model.Watch.Description</p>
                <div class="navigationLinksShow">
                    <form id="@Model.Watch.Id" asp-action="AddToCart"
                          asp-controller="Cart" method="post">
                        <input type="hidden" name="ProductId" value="@Model.selectedWatchParts" />
                        <input type="hidden" name="returnUrl"
                               value="@ViewContext.HttpContext.Request.PathAndQuery()" />
                        <span class="">
                            <button type="submit"
                                    class="shop">
                                Add To Cart
                            </button>
                        </span>
                    </form>
                    <form asp-controller="ThreeD" asp-action="Index" asp-route-watchId="@Model.Watch.Id" method="post">
                        <button type="submit" class="shop">Build your own</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="imageCenter">
        <img class="sliderImg" src="~/Images/@Model.Watch.WatchImagePath" alt="@Model.Watch.Name" />

    </div>

</section>

<section id="HighlightComponent">
    <div class="hlContainer">
        <h2 class="hlTitle">@Model.Watch.WatchParts[0].TextureMap.TextureName</h2>
        <p class="hlDesc">@Model.Watch.WatchParts[0].TextureMap.TextureDesc</p>
    </div>
</section>

<section id="components">
    @if (true)
    {
        List<string> textures = new List<string>();
        textures.Add(Model.Watch.WatchParts.ToList().Where(item => item.TypeId == 1).First().TextureMap.TextureName);
    <p class="BigThumbnail hidden">@Model.Watch.WatchParts.ToList().Where(item => item.TypeId == 1).First().TextureMap.ThumbnailPath</p>
        int counter = 0;
        @foreach (var item in Model.Watch.WatchParts)
        {

            string foundTexture = textures.Where(texture => texture.Equals(item.TextureMap.TextureName)).FirstOrDefault();
            if (foundTexture == null && counter < 3)
            {
                <div class="component">
                    <h3 class="compTitle">@item.TextureMap.TextureName</h3>
                    <p class="compDesc">@item.TextureMap.TextureDesc</p>
                    <p class="thumbnails hidden">@item.TextureMap.ThumbnailPath</p>
                </div>
                textures.Add(item.TextureMap.TextureName);
                counter++;
            }
            
        }
    }



</section>

<section id="recommendations">
    <h3>You may also like</h3>
    <div class="productsRec">

        @await Component.InvokeAsync("YouMayAlsoLike", Model.Watch.Name)

    </div>
</section>

<script src="~/js/ProductPage.js" type="text/javascript"></script>